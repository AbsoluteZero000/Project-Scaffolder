{
  "{{projectName}}": {
    "src": {
      "app": {
        "routes": {
          "__init__.py": "from flask import Flask\n\n# Add custom route files here\nfrom .health import health_blueprint\n\n\n# This function is used to register all custom routes\n# to the main app as endpoints\ndef register(app: Flask) -> None:\n  app.register_blueprint(health_blueprint)",
          "health.py": "# This is a sample route file\n# it contains the blueprint that you will use to register the routes\n\nfrom flask import Blueprint\n\nhealth_blueprint = Blueprint(\"health\", __name__, url_prefix=\"/health\")\n\n# Use annotations to define the endpoint that is going to appended to the prefix defined in the blueprint\n@health_blueprint.route(\"/\", methods=[\"GET\"])\ndef health_check():\n  return \"App running nicely :)\""
        },
        "__init__.py": "",
        "__main__.py": "from flask import Flask\nfrom app import routes\n{{mainImports}}\n\ndef main() -> Flask:\n  app = Flask(__name__)\n\n  return app\ndef run():\n  app = main()\n {{appConfig}}\n  app.run(\"localhost\", 5000)\n\n  routes.register(app)\n\n\nif __name__ == \"__main__\":\n  run()"
      }
    },
    "tests": {
      "__init__.py": ""
    },
    ".gitignore": "__pycache__/\n.python-version\n\n# Code editor and IDE ignores\n.vscode\n.idea",
    "README.md": "*First run create your python virtual environment by using venv\n  python -m venv \"virtual-env-name\"\nand activate it using the activation script found in the bin directory in the venv\n\n*Then install poetry using pip\n  pip install poetry\n\n*You can now use poetry to manage your dependencies easily, firstly install the default dependencies\n  poetry install",
    "pyproject.toml": "[tool.poetry]\nname = \"{{projectName}}\"\nversion = \"0.1.0\"\ndescription = \"\"\nauthors = [\"Your Name <you@example.com>\"]\nreadme = \"README.md\"\n\n[tool.poetry.dependencies]\npython = \"^3.12\"\nflask = \"^3.0.3\"\n{{poetryDependencies}}\n\n\n[build-system]\nrequires = [\"poetry-core\"]\nbuild-backend = \"poetry.core.masonry.api\""
  }
}
