{
    "app": {
        "controllers": {
            "health.go": "package controllers\n\nimport (\n\t\"github.com/gofiber/fiber/v2\"\n)\n\n// To create a new route, we need to create a new function that will be called by the router\n// This function will take a fiber.Ctx as a parameter and return an error\n// The fiber.Ctx is the context of the request, it contains all the information about the request\n// The error will be used to return an error if something goes wrong\n// Function to check the health of the application\nfunc Health(c *fiber.Ctx) error {\n\t// Return a message to the user\n\treturn c.SendString(\"App is running!\")\n}\n"
        }
    },
    "pkg": {
        "middleware": {
            "fiber_middleware.go": "package middleware\n\n// Add the necessary imports\nimport (\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/gofiber/fiber/v2/middleware/cors\"\n\t\"github.com/gofiber/fiber/v2/middleware/logger\"\n\n)\n\n// FiberMiddleware is a function that will be called by the router}\nfunc FiberMiddleware(app *fiber.App) {\n\t// Add middleware to the application\n\t// The order of the middleware is important\n\t// The middleware will be executed in the order they are added\n\t// The cors middleware will add the necessary headers to allow cross-origin requests\n\t// The logger middleware will log the requests to the console\n\tapp.Use(cors.New(), logger.New())\n}\n"
        },
        "router": {
            "public_routes.go": "package router\n\nimport (\n\t\"github.com/gofiber/fiber/v2\";\n\t\"project-name/app/controllers\"\n)\n\n\nfunc PublicRoutes(app *fiber.App) {\n\n\t// Create a new route group\n\troute := app.Group(\"/api\")\n\n\t// Define the route for the health check\n\t// The first parameter is the path of the route\n\t// The second parameter is the function that will be called when the route is matched\n\t// The method Get is used to match GET requests\n\troute.Get(\"/health\", controllers.Health)\n}\n"
        },
        "utils": {
            "sample_util.go": "package utils\n\nimport (\n\t\"fmt\"\n)\n\n// This is a sample utility function that will be used in the application\n// This function will take a string as a parameter and return a string\n// The function will return the input string with a prefix\nfunc SampleUtil(input string) string {\n\treturn fmt.Sprintf(\"Prefix: %s\", input)\n}\n"
        }
    },
    ".gitignore": "build/\ntmp/\n\n.env\n\n.vscode\n",
    "go.mod": "module project-name\n\ngo 1.22.4\n\nrequire github.com/gofiber/fiber/v2 v2.52.5\n\nrequire (\n\tgithub.com/andybalholm/brotli v1.0.5 // indirect\n\tgithub.com/google/uuid v1.5.0 // indirect\n\tgithub.com/klauspost/compress v1.17.0 // indirect\n\tgithub.com/mattn/go-colorable v0.1.13 // indirect\n\tgithub.com/mattn/go-isatty v0.0.20 // indirect\n\tgithub.com/mattn/go-runewidth v0.0.15 // indirect\n\tgithub.com/rivo/uniseg v0.2.0 // indirect\n\tgithub.com/valyala/bytebufferpool v1.0.0 // indirect\n\tgithub.com/valyala/fasthttp v1.51.0 // indirect\n\tgithub.com/valyala/tcplisten v1.0.0 // indirect\n\tgolang.org/x/sys v0.15.0 // indirect\n)\n",
    "main.go": "package main\n\nimport (\n\t\"github.com/gofiber/fiber/v2\"\n\t\"project-name/pkg/router\"\n\t\"project-name/pkg/middleware\"\n{% for key, value in dependencies.items() %}\t\"{{ value["mainImports"] }}\"\n{% endfor %})\n\nfunc main() {\n\n\tapp := fiber.New()\n\n\t// Add the middleware to the application\n\tmiddleware.FiberMiddleware(app)\n{% for key, value in dependencies.items() %}\t{{ value["appConfig"] }}\n{% endfor %}\n\t// Add the routes to the application\n\trouter.PublicRoutes(app)\n\n\t// Add default route\n\tapp.Get(\"/\", func(c *fiber.Ctx) error {\n\t\treturn c.SendString(\"Hello user! Test the health of the application by visiting /api/health\")\n\t})\n\n\t// Start the application on port 5000\n\tapp.Listen(\":5000\")\n\n}\n",
    "README.md": "- Make sure to first install the CLI for GO\n- After you install the GO CLI be sure to install the default dependencies for the project by using ```bash source get_dependencies.sh``` or ```bash sh get_dependencies.sh```\n- Now you are ready to run the application, navigate to the root directory and run the app using ```bash go run main.go```\n- If you need to install any extra dependencies use ```bash go get <dependency-url>```\n\n## Template structure\n\n### ./app\n\n**Folder with business logic only**. This directory doesn't care about _what database driver you're using_ or _which caching solution your choose_ or any third-party things.\n\n- `./app/controllers` folder for functional controllers (used in routes)\n- `./app/models` folder for describe business models and methods of your project\n\n### ./pkg\n\n**Folder with project-specific functionality**. This directory contains all the project-specific code tailored only for your business use case, like _middleware_, _routes_ or _utils_.\n\n- `./pkg/middleware` folder for add middleware (Fiber built-in and yours)\n- `./pkg/routes` folder for describe routes of your project\n- `./pkg/utils` folder with utility functions (server starter, error checker, etc)\n- References for dependencies\n{% for key, value in dependencies.items() %}{{ value["readme"] }}\n{% endfor %}\n",
    "get_dependencies.sh": "#!/bin/bash\n\n# Install the necessary dependencies\ngo mod tidy\ngo get github.com/gofiber/fiber/v2\n{% for key, value in dependencies.items() %}{{ value["dependenciesLink"] }}\n{% endfor %}",
}
